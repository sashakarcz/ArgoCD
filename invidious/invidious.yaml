---
apiVersion: v1
kind: Namespace
metadata:
  name: invidious

---
# Note: Create secrets separately before applying this manifest:
# Run the create-invidious-secrets.sh script

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: invidious-postgres-data
  namespace: invidious
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: longhorn

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invidious-config
  namespace: invidious
data:
  config.yml: |
    # Invidious Configuration
    db:
      user: invidious
      password: # Set via environment variable
      host: postgres
      port: 5432
      dbname: invidious
    
    # Server configuration
    host_binding: 0.0.0.0
    port: 3000
    https_only: true
    domain: vid.starnix.net
    external_port: 443
    
    # Features
    registration_enabled: false
    login_enabled: false
    captcha_enabled: false
    admins: []
    
    # Privacy and performance
    statistics_enabled: false
    popular_enabled: false
    trending_enabled: false
    feed_menu: []
    
    # Quality settings
    default_user_preferences:
      quality: dash
      quality_dash: auto
      autoplay: false
      thin_mode: false
      dark_mode: true
      player_style: invidious
      related_videos: false
      annotations: false
      extend_desc: false
      vr_mode: false
      save_player_pos: false

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invidious-postgres
  namespace: invidious
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invidious-postgres
  template:
    metadata:
      labels:
        app: invidious-postgres
    spec:
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_DB
          value: invidious
        - name: POSTGRES_USER
          value: invidious
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: invidious-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - invidious
            - -d
            - invidious
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - invidious
            - -d
            - invidious
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: invidious-postgres-data

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: invidious
spec:
  selector:
    app: invidious-postgres
  ports:
  - port: 5432

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: invidious-init
  namespace: invidious
data:
  init-db.sh: |
    #!/bin/bash
    set -e
    
    echo "Waiting for PostgreSQL to be ready..."
    until pg_isready -h postgres -U invidious; do
      echo "Waiting for PostgreSQL..."
      sleep 5
    done
    
    echo "Checking if database is initialized..."
    TABLE_COUNT=$(psql -h postgres -U invidious -d invidious -t -c "SELECT COUNT(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null || echo "0")
    
    if [ "$TABLE_COUNT" -eq "0" ] || [ "$TABLE_COUNT" = "" ]; then
      echo "Database not initialized, downloading and applying schema..."
      cd /tmp
      wget -O schema.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/channels.sql
      wget -O annotations.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/annotations.sql
      wget -O videos.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/videos.sql
      wget -O users.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/users.sql
      wget -O session_ids.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/session_ids.sql
      wget -O nonces.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/nonces.sql
      wget -O playlists.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/playlists.sql
      wget -O playlist_videos.sql https://raw.githubusercontent.com/iv-org/invidious/master/config/sql/playlist_videos.sql
      
      echo "Applying database schema..."
      for sql_file in *.sql; do
        echo "Applying $sql_file..."
        psql -h postgres -U invidious -d invidious -f "$sql_file" || echo "Warning: Failed to apply $sql_file, continuing..."
      done
      
      echo "Database initialization complete!"
    else
      echo "Database already initialized with $TABLE_COUNT tables."
    fi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: invidious-app
  namespace: invidious
spec:
  replicas: 1
  selector:
    matchLabels:
      app: invidious-app
  template:
    metadata:
      labels:
        app: invidious-app
    spec:
      initContainers:
      - name: init-database
        image: postgres:15-alpine
        command: ["/bin/bash", "/scripts/init-db.sh"]
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: invidious-secrets
              key: postgres-password
        volumeMounts:
        - name: init-scripts
          mountPath: /scripts
      containers:
      - name: invidious
        image: quay.io/invidious/invidious:latest
        ports:
        - containerPort: 3000
        env:
        - name: INVIDIOUS_CONFIG_FILE
          value: /invidious/config/config.yml
        - name: INVIDIOUS_DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: invidious-secrets
              key: database-url
        volumeMounts:
        - name: invidious-config
          mountPath: /invidious/config
          readOnly: true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
          limits:
            cpu: 2000m
            memory: 2Gi
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: invidious-config
        configMap:
          name: invidious-config
      - name: init-scripts
        configMap:
          name: invidious-init
          defaultMode: 0755

---
apiVersion: v1
kind: Service
metadata:
  name: invidious-app
  namespace: invidious
spec:
  selector:
    app: invidious-app
  ports:
  - port: 80
    targetPort: 3000

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: invidious-ingress
  namespace: invidious
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - vid.starnix.net
    secretName: invidious-tls
  rules:
  - host: vid.starnix.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: invidious-app
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: invidious-hpa
  namespace: invidious
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: invidious-app
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
