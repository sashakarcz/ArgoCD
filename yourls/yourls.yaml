---
apiVersion: v1
kind: ConfigMap
metadata:
  name: yourls-index
  namespace: yourls
data:
  index.php: |
    <?php
    // Simple index file to prevent 403 errors
    header('Location: /admin/', true, 302);
    exit();
    ?>

---
apiVersion: v1
kind: Namespace
metadata:
  name: yourls

---
# Note: Create secrets separately before applying this manifest:
# kubectl create secret generic yourls-secrets -n yourls \
#   --from-literal=mysql-root-password="your-strong-root-password" \
#   --from-literal=mysql-password="your-strong-password" \
#   --from-literal=yourls-user="admin" \
#   --from-literal=yourls-pass="your-admin-password"

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: yourls-mysql-data
  namespace: yourls
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: longhorn

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: yourls-config
  namespace: yourls
data:
  config.php: |
    <?php
    define( 'YOURLS_DB_USER', getenv('YOURLS_DB_USER') );
    define( 'YOURLS_DB_PASS', getenv('YOURLS_DB_PASS') );
    define( 'YOURLS_DB_NAME', getenv('YOURLS_DB_NAME') );
    define( 'YOURLS_DB_HOST', getenv('YOURLS_DB_HOST') );
    define( 'YOURLS_DB_PREFIX', 'yourls_' );
    define( 'YOURLS_SITE', 'https://go.starnix.net' );
    define( 'YOURLS_HOURS_OFFSET', 0 );
    define( 'YOURLS_LANG', '' );
    define( 'YOURLS_UNIQUE_URLS', true );
    define( 'YOURLS_PRIVATE', false );
    define( 'YOURLS_COOKIEKEY', 'modify this text with something random' );
    $yourls_user_passwords = array(
        getenv('YOURLS_USER') => getenv('YOURLS_PASS')
    );
    define( 'YOURLS_DEBUG', false );
    define( 'YOURLS_URL_CONVERT', 36 );
    $yourls_reserved_URL = array(
        'porn', 'faggot', 'sex', 'nigger', 'fuck', 'cunt', 'dick',
    );

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yourls-mysql
  namespace: yourls
spec:
  replicas: 1
  selector:
    matchLabels:
      app: yourls-mysql
  template:
    metadata:
      labels:
        app: yourls-mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: yourls
        - name: MYSQL_USER
          value: yourls
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: mysql-password
        volumeMounts:
        - name: mysql-data
          mountPath: /var/lib/mysql
        resources:
          requests:
            cpu: 250m
            memory: 512Mi
          limits:
            cpu: 1000m
            memory: 2Gi
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: yourls-mysql-data

---
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: yourls
spec:
  selector:
    app: yourls-mysql
  ports:
  - port: 3306

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yourls-app
  namespace: yourls
spec:
  replicas: 1
  selector:
    matchLabels:
      app: yourls-app
  template:
    metadata:
      labels:
        app: yourls-app
    spec:
      initContainers:
      - name: wait-for-mysql
        image: mysql:8.0
        command:
        - sh
        - -c
        - |
          until mysqladmin ping -h mysql -u yourls -p$(MYSQL_PASSWORD) --silent; do
            echo "Waiting for MySQL..."
            sleep 5
          done
        env:
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: mysql-password
      containers:
      - name: yourls
        image: yourls:latest
        ports:
        - containerPort: 8080
        env:
        - name: YOURLS_DB_USER
          value: yourls
        - name: YOURLS_DB_PASS
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: mysql-password
        - name: YOURLS_DB_NAME
          value: yourls
        - name: YOURLS_DB_HOST
          value: mysql
        - name: YOURLS_USER
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: yourls-user
        - name: YOURLS_PASS
          valueFrom:
            secretKeyRef:
              name: yourls-secrets
              key: yourls-pass
        volumeMounts:
        - name: yourls-config
          mountPath: /var/www/html/user/config.php
          subPath: config.php
          readOnly: true
        - name: yourls-index
          mountPath: /var/www/html/index.php
          subPath: index.php
          readOnly: true
        resources:
          requests:
            cpu: 300m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /admin/
            port: 8080
            httpHeaders:
            - name: Host
              value: go.starnix.net
          initialDelaySeconds: 120
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /admin/
            port: 8080
            httpHeaders:
            - name: Host
              value: go.starnix.net
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
      volumes:
      - name: yourls-config
        configMap:
          name: yourls-config
      - name: yourls-index
        configMap:
          name: yourls-index

---
apiVersion: v1
kind: Service
metadata:
  name: yourls-app
  namespace: yourls
spec:
  selector:
    app: yourls-app
  ports:
  - port: 80
    targetPort: 8080

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: yourls-ingress
  namespace: yourls
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "300"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - go.starnix.net
    secretName: yourls-tls
  rules:
  - host: go.starnix.net
    http:
      paths:
      - path: /
        pathType: Exact
        backend:
          service:
            name: yourls-redirect
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: yourls-redirect
  namespace: yourls
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>Redirecting...</title>
        <meta http-equiv="refresh" content="0;url=/admin">
        <script>window.location.replace('/admin');</script>
    </head>
    <body>
        <p>Redirecting to <a href="/admin">admin panel</a>...</p>
    </body>
    </html>

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: yourls-redirect
  namespace: yourls
spec:
  replicas: 1
  selector:
    matchLabels:
      app: yourls-redirect
  template:
    metadata:
      labels:
        app: yourls-redirect
    spec:
      containers:
      - name: nginx
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: redirect-page
          mountPath: /usr/share/nginx/html
        resources:
          requests:
            cpu: 10m
            memory: 16Mi
          limits:
            cpu: 100m
            memory: 64Mi
      volumes:
      - name: redirect-page
        configMap:
          name: yourls-redirect

---
apiVersion: v1
kind: Service
metadata:
  name: yourls-redirect
  namespace: yourls
spec:
  selector:
    app: yourls-redirect
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: yourls-root-redirect
  namespace: yourls
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: "100m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - go.starnix.net
    secretName: yourls-tls
  rules:
  - host: go.starnix.net
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: yourls-app
            port:
              number: 80

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: yourls-hpa
  namespace: yourls
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: yourls-app
  minReplicas: 1
  maxReplicas: 3
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
